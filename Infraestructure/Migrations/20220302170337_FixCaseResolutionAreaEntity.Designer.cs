// <auto-generated />
using System;
using Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Continental.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220302170337_FixCaseResolutionAreaEntity")]
    partial class FixCaseResolutionAreaEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyContact", b =>
                {
                    b.Property<int>("CompaniesId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactsId")
                        .HasColumnType("integer");

                    b.HasKey("CompaniesId", "ContactsId");

                    b.HasIndex("ContactsId");

                    b.ToTable("CompanyContact");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Branch.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentFile")
                        .HasColumnType("text");

                    b.Property<string>("BusinessOfficer")
                        .HasColumnType("text");

                    b.Property<int>("CaseOwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("CaseStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientComment")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FinansysTicketNumber")
                        .HasColumnType("text");

                    b.Property<string>("IdServidesk")
                        .HasColumnType("text");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer");

                    b.Property<int>("PromoterId")
                        .HasColumnType("integer");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<bool>("RequestExtension")
                        .HasColumnType("boolean");

                    b.Property<string>("Solution")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<int>("SubtypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TypificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserWhoCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserWhoModifiedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseOwnerId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PromoterId");

                    b.HasIndex("SubtypeId");

                    b.HasIndex("TypeId");

                    b.HasIndex("TypificationId");

                    b.HasIndex("UserWhoCreatedId");

                    b.HasIndex("UserWhoModifiedId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CaseOrigin");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseResolutionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("ResolutionAreaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("ResolutionAreaId");

                    b.ToTable("CaseResolutionArea");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CaseStatus");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseSubtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CaseSubtype");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CaseType");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseTypification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CaseTypification");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.Resolver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("Resolver");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Clerk.Clerk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clerks");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.Banca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Bancas");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.CivilStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("CivilStatus");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.ResolutionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("ResolutionArea");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Common.WalletType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("WalletTypes");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("BancaId")
                        .HasColumnType("integer");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("text");

                    b.Property<int>("BillingRange")
                        .HasColumnType("integer");

                    b.Property<string>("BillingState")
                        .HasColumnType("text");

                    b.Property<string>("BillingStreet")
                        .HasColumnType("text");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchManagerClerkId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchManagerUserId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ClientCode")
                        .HasColumnType("text");

                    b.Property<int>("ClientFont")
                        .HasColumnType("integer");

                    b.Property<int>("ClientState")
                        .HasColumnType("integer");

                    b.Property<int>("ContactOwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EconomicActivity")
                        .HasColumnType("text");

                    b.Property<int>("EmployersQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Foundation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HomeNumber")
                        .HasColumnType("integer");

                    b.Property<int>("IsClient")
                        .HasColumnType("integer");

                    b.Property<int>("LeadsSource")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text");

                    b.Property<int>("OfficialId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerCompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentEntity")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Ruc")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SupervisorClerkId")
                        .HasColumnType("integer");

                    b.Property<int>("SupervisorUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamLeaderClerkId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamLeaderUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserWhoCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserWhoModifiedId")
                        .HasColumnType("integer");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.Property<string>("Zone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BancaId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BranchManagerClerkId");

                    b.HasIndex("BranchManagerUserId");

                    b.HasIndex("ContactOwnerId");

                    b.HasIndex("OfficialId");

                    b.HasIndex("OwnerCompanyId");

                    b.HasIndex("SupervisorClerkId");

                    b.HasIndex("SupervisorUserId");

                    b.HasIndex("TeamLeaderClerkId");

                    b.HasIndex("TeamLeaderUserId");

                    b.HasIndex("UserWhoCreatedId");

                    b.HasIndex("UserWhoModifiedId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.EconomicActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EconomicActivity");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.OperatingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("OperatingEntity");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Contact.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AssistantEmail")
                        .HasColumnType("text");

                    b.Property<string>("AssistantName")
                        .HasColumnType("text");

                    b.Property<string>("AssistantPhone")
                        .HasColumnType("text");

                    b.Property<int>("BancaId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchManagerClerkId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchManagerUserId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("CivilStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientCode")
                        .HasColumnType("text");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentSalary")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("EconomicActivity")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int>("GenderTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("HomeNumber")
                        .HasColumnType("text");

                    b.Property<int>("IsClient")
                        .HasColumnType("integer");

                    b.Property<string>("Landline")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MailingCity")
                        .HasColumnType("text");

                    b.Property<string>("MailingCountry")
                        .HasColumnType("text");

                    b.Property<string>("MailingState")
                        .HasColumnType("text");

                    b.Property<string>("MailingStreet")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text");

                    b.Property<int>("OfficialId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("text");

                    b.Property<int>("SupervisorClerkId")
                        .HasColumnType("integer");

                    b.Property<int>("SupervisorUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamLeaderClerkId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamLeaderUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserWhoCreatedId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserWhoModifiedId")
                        .HasColumnType("integer");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BancaId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BranchManagerClerkId");

                    b.HasIndex("BranchManagerUserId");

                    b.HasIndex("CivilStatusId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("OfficialId");

                    b.HasIndex("SupervisorClerkId");

                    b.HasIndex("SupervisorUserId");

                    b.HasIndex("TeamLeaderClerkId");

                    b.HasIndex("TeamLeaderUserId");

                    b.HasIndex("UserWhoCreatedId");

                    b.HasIndex("UserWhoModifiedId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Lead.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CompanyContact", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Company.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Contact.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.Case", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "CaseOwner")
                        .WithMany()
                        .HasForeignKey("CaseOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Cases.CaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Contact.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Cases.CaseOrigin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Contact.Contact", "Promoter")
                        .WithMany()
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Cases.CaseSubtype", "Subtype")
                        .WithMany()
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Cases.CaseType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Cases.CaseTypification", "Typification")
                        .WithMany()
                        .HasForeignKey("TypificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "UserWhoCreated")
                        .WithMany()
                        .HasForeignKey("UserWhoCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "UserWhoModified")
                        .WithMany()
                        .HasForeignKey("UserWhoModifiedId");

                    b.Navigation("CaseOwner");

                    b.Navigation("CaseStatus");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Origin");

                    b.Navigation("Promoter");

                    b.Navigation("Subtype");

                    b.Navigation("Type");

                    b.Navigation("Typification");

                    b.Navigation("UserWhoCreated");

                    b.Navigation("UserWhoModified");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.CaseResolutionArea", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Cases.Case", "Case")
                        .WithMany("CaseResolutionAreas")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Common.ResolutionArea", "ResolutionArea")
                        .WithMany()
                        .HasForeignKey("ResolutionAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("ResolutionArea");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.Resolver", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Cases.Case", "Case")
                        .WithMany("Resolvers")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Clerk.Clerk", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.Company", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Common.Banca", "Banca")
                        .WithMany()
                        .HasForeignKey("BancaId");

                    b.HasOne("Continental.API.Core.Entities.Branch.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "BranchManagerClerk")
                        .WithMany()
                        .HasForeignKey("BranchManagerClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "BranchManagerUser")
                        .WithMany()
                        .HasForeignKey("BranchManagerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "ContactOwner")
                        .WithMany()
                        .HasForeignKey("ContactOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "Official")
                        .WithMany()
                        .HasForeignKey("OfficialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "OwnerCompany")
                        .WithMany()
                        .HasForeignKey("OwnerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "SupervisorClerk")
                        .WithMany()
                        .HasForeignKey("SupervisorClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "SupervisorUser")
                        .WithMany()
                        .HasForeignKey("SupervisorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "TeamLeaderClerk")
                        .WithMany()
                        .HasForeignKey("TeamLeaderClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "TeamLeaderUser")
                        .WithMany()
                        .HasForeignKey("TeamLeaderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "UserWhoCreated")
                        .WithMany()
                        .HasForeignKey("UserWhoCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "UserWhoModified")
                        .WithMany()
                        .HasForeignKey("UserWhoModifiedId");

                    b.HasOne("Continental.API.Core.Entities.Common.WalletType", "WalletType")
                        .WithMany()
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banca");

                    b.Navigation("Branch");

                    b.Navigation("BranchManagerClerk");

                    b.Navigation("BranchManagerUser");

                    b.Navigation("ContactOwner");

                    b.Navigation("Official");

                    b.Navigation("OwnerCompany");

                    b.Navigation("SupervisorClerk");

                    b.Navigation("SupervisorUser");

                    b.Navigation("TeamLeaderClerk");

                    b.Navigation("TeamLeaderUser");

                    b.Navigation("UserWhoCreated");

                    b.Navigation("UserWhoModified");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.EconomicActivity", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Company.Company", null)
                        .WithMany("EconomicActivities")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.OperatingEntity", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Company.Company", null)
                        .WithMany("OperatingEntities")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Contact.Contact", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Common.Banca", "Banca")
                        .WithMany()
                        .HasForeignKey("BancaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Branch.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "BranchManagerClerk")
                        .WithMany()
                        .HasForeignKey("BranchManagerClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "BranchManagerUser")
                        .WithMany()
                        .HasForeignKey("BranchManagerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Common.CivilStatus", "CivilStatus")
                        .WithMany()
                        .HasForeignKey("CivilStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Common.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Common.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Common.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "Official")
                        .WithMany()
                        .HasForeignKey("OfficialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "SupervisorClerk")
                        .WithMany()
                        .HasForeignKey("SupervisorClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "SupervisorUser")
                        .WithMany()
                        .HasForeignKey("SupervisorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.Clerk.Clerk", "TeamLeaderClerk")
                        .WithMany()
                        .HasForeignKey("TeamLeaderClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "TeamLeaderUser")
                        .WithMany()
                        .HasForeignKey("TeamLeaderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "UserWhoCreated")
                        .WithMany()
                        .HasForeignKey("UserWhoCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Continental.API.Core.Entities.User.User", "UserWhoModified")
                        .WithMany()
                        .HasForeignKey("UserWhoModifiedId");

                    b.HasOne("Continental.API.Core.Entities.Common.WalletType", "WalletType")
                        .WithMany()
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banca");

                    b.Navigation("Branch");

                    b.Navigation("BranchManagerClerk");

                    b.Navigation("BranchManagerUser");

                    b.Navigation("CivilStatus");

                    b.Navigation("ContactType");

                    b.Navigation("DocumentType");

                    b.Navigation("Gender");

                    b.Navigation("Official");

                    b.Navigation("SupervisorClerk");

                    b.Navigation("SupervisorUser");

                    b.Navigation("TeamLeaderClerk");

                    b.Navigation("TeamLeaderUser");

                    b.Navigation("UserWhoCreated");

                    b.Navigation("UserWhoModified");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Lead.Lead", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Company.Company", null)
                        .WithMany("Leads")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.User.User", b =>
                {
                    b.HasOne("Continental.API.Core.Entities.Contact.Contact", null)
                        .WithMany("OfficialUsers")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Cases.Case", b =>
                {
                    b.Navigation("CaseResolutionAreas");

                    b.Navigation("Resolvers");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Company.Company", b =>
                {
                    b.Navigation("EconomicActivities");

                    b.Navigation("Leads");

                    b.Navigation("OperatingEntities");
                });

            modelBuilder.Entity("Continental.API.Core.Entities.Contact.Contact", b =>
                {
                    b.Navigation("OfficialUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
